stages:
  - build
  - deploy

############################################
################# CONFIG ###################
############################################

before_script:
  - | # export env file and copy routing table to pyalbert config
    if [[ -z $CI_ENVIRONMENT_NAME ]]; then
      echo "info: CI_ENVIRONMENT_NAME is empty, skip the export"
    else
      if [[ $CI_COMMIT_BRANCH = "staging" ]]; then
        echo "info: export staging env file of $CI_ENVIRONMENT_NAME environment"
        export $(grep -v "^#" $STAGING__ENV_FILE | xargs)
      elif [[ $CI_COMMIT_BRANCH = "main" ]]; then
        echo "info: export production env file of $CI_ENVIRONMENT_NAME environment"
        export $(grep -v "^#" $PROD__ENV_FILE | xargs)
      fi
    fi

config:clean gitlab runner:
  rules:
    - when: manual
      allow_failure: true  # to avoid blocked state
  stage: .pre
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker system prune -af --volumes


################## DINUM ###################

build:front:dinum:
  environment:
    name: dinum
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true  # to avoid blocked state
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - touch .env && echo "VITE_API_URL=$CI_DEPLOY_URL" > .env
    - cd . && docker build -t $CI_REGISTRY_IMAGE/front_albert:latest .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/front_albert:latest

deploy-front:
  environment:
    name: dinum
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true  # to avoid blocked state
  stage: deploy
  image: alpine:latest
  script:
    - chmod og= $CI_DEPLOY_USER_SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker pull $CI_REGISTRY_IMAGE/front_albert:latest"
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker container rm -f miaou-front-albert || true"
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker run  -d -p 4174:4173   --name miaou-front-albert $CI_REGISTRY_IMAGE/front_albert:latest"


################## France Services ###################

build:front:fs:
  environment:
    name: franceservices
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true  # to avoid blocked state
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - touch .env && echo "VITE_API_URL=$CI_DEPLOY_URL" > .env
    - cd . && docker build -t $CI_REGISTRY_IMAGE/front_albert:latest .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/front_albert:latest

deploy-front-fs:
  environment:
    name: franceservices
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true  # to avoid blocked state
  stage: deploy
  image: alpine:latest
  script:
    - chmod og= $CI_DEPLOY_USER_SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker pull $CI_REGISTRY_IMAGE/front_albert_fs:latest"
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker container rm -f miaou-front-albert || true"
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker container rm -f miaou-front-albert_fs || true"
    - ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "docker run -d -p 4174:4173  --name miaou-front-albert_fs  $CI_REGISTRY_IMAGE/front_albert_fs:latest "
